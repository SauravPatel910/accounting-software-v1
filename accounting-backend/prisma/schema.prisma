generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userProfiles UserProfile[]
  auditLogs    AuditLog[]

  @@map("users")
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String
  firstName   String?
  lastName    String?
  phoneNumber String?
  timezone    String   @default("UTC")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  companies UserCompanyAccess[]

  @@map("user_profiles")
}

// Company Management (Multi-tenant)
model Company {
  id              String   @id @default(cuid())
  name            String
  registrationNo  String?
  taxId           String?
  address         String?
  city            String?
  state           String?
  country         String   @default("US")
  postalCode      String?
  phone           String?
  email           String?
  website         String?
  fiscalYearStart Int      @default(1) // 1 = January
  baseCurrency    String   @default("USD")
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userAccess   UserCompanyAccess[]
  accounts     Account[]
  transactions Transaction[]
  invoices     Invoice[]
  customers    Customer[]
  vendors      Vendor[]
  products     Product[]
  auditLogs    AuditLog[]

  @@map("companies")
}

model UserCompanyAccess {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("user_company_access")
}

enum UserRole {
  OWNER
  ADMIN
  ACCOUNTANT
  USER
  VIEWER
}

// Chart of Accounts
model Account {
  id              String      @id @default(cuid())
  companyId       String
  code            String
  name            String
  description     String?
  accountType     AccountType
  parentAccountId String?
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  company           Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parentAccount     Account?      @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  childAccounts     Account[]     @relation("AccountHierarchy")
  debitEntries      Transaction[] @relation("DebitAccount")
  creditEntries     Transaction[] @relation("CreditAccount")

  @@unique([companyId, code])
  @@map("accounts")
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

// Transaction Management (Double-Entry Bookkeeping)
model Transaction {
  id              String           @id @default(cuid())
  companyId       String
  transactionDate DateTime
  reference       String?
  description     String
  amount          Decimal          @db.Decimal(15, 4) // Precise decimal for financial calculations
  debitAccountId  String
  creditAccountId String
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String?

  // Relations
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  debitAccount  Account @relation("DebitAccount", fields: [debitAccountId], references: [id])
  creditAccount Account @relation("CreditAccount", fields: [creditAccountId], references: [id])

  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Customer Management
model Customer {
  id           String   @id @default(cuid())
  companyId    String
  name         String
  email        String?
  phone        String?
  address      String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  taxId        String?
  creditLimit  Decimal? @db.Decimal(15, 4)
  paymentTerms Int?     // Days
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  @@map("customers")
}

// Vendor Management
model Vendor {
  id           String   @id @default(cuid())
  companyId    String
  name         String
  email        String?
  phone        String?
  address      String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  taxId        String?
  paymentTerms Int?     // Days
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

// Product/Service Management
model Product {
  id          String      @id @default(cuid())
  companyId   String
  name        String
  description String?
  sku         String?
  category    String?
  unitPrice   Decimal     @db.Decimal(15, 4)
  costPrice   Decimal?    @db.Decimal(15, 4)
  unit        String      @default("each")
  productType ProductType @default(PRODUCT)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoiceItems InvoiceItem[]

  @@unique([companyId, sku])
  @@map("products")
}

enum ProductType {
  PRODUCT
  SERVICE
}

// Invoice Management
model Invoice {
  id           String        @id @default(cuid())
  companyId    String
  customerId   String
  invoiceNo    String
  issueDate    DateTime
  dueDate      DateTime
  description  String?
  subtotal     Decimal       @db.Decimal(15, 4)
  taxAmount    Decimal       @db.Decimal(15, 4) @default(0)
  totalAmount  Decimal       @db.Decimal(15, 4)
  paidAmount   Decimal       @db.Decimal(15, 4) @default(0)
  status       InvoiceStatus @default(DRAFT)
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  company Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer Customer     @relation(fields: [customerId], references: [id])
  items    InvoiceItem[]

  @@unique([companyId, invoiceNo])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  productId   String?
  description String
  quantity    Decimal @db.Decimal(10, 4)
  unitPrice   Decimal @db.Decimal(15, 4)
  amount      Decimal @db.Decimal(15, 4)
  createdAt   DateTime @default(now())

  // Relations
  invoice Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

// Audit Trail (LEGALLY REQUIRED)
model AuditLog {
  id        String   @id @default(cuid())
  companyId String?
  userId    String
  action    String   // CREATE, UPDATE, DELETE, VIEW
  tableName String
  recordId  String
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
